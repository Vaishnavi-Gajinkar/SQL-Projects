Basic:
Retrieve the total number of orders placed.
Calculate the total revenue generated from pizza sales.
Identify the highest-priced pizza.
Identify the most common pizza size ordered.
List the top 5 most ordered pizza types along with their quantities.

Intermediate:
Join the necessary tables to find the total quantity of each pizza category ordered.
Determine the distribution of orders by hour of the day.
Join relevant tables to find the category-wise distribution of pizzas.
Group the orders by date and calculate the average number of pizzas ordered per day.
Determine the top 3 most ordered pizza types based on revenue.

Advanced:
Calculate the percentage contribution of each pizza type to total revenue.
Analyze the cumulative revenue generated over time.
Determine the top 3 most ordered pizza types based on revenue for each pizza category.


To create dB & table manually in MySQL

CREATE DATABASE fastfood;
create table order_details(
    order_details_id int primary key,
    order_id int not null,
    pizza_id text not null,
    quantity int not null
);

BASIC Querries:

-- Q1.Retrieve the total number of orders placed.
SELECT count(order_id) FROM orders -- 21350

-- Q2.Calculate the total revenue generated from pizza sales.
SELECT ROUND(SUM(order_details.quantity*pizzas.price),2) AS revenue
FROM order_details JOIN pizzas
ON order_details.pizza_id = pizzas.pizza_id -- 817860.05

-- Q3.Identify the highest-priced pizza.
SELECT pizza_types.name, pizzas.price
FROM pizza_types JOIN pizzas 
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
order by price desc -- the greek pizza 35.95

-- Q4.Identify the most common pizza size ordered.
SELECT pizzas.size, COUNT(order_details.order_id) NumOfOrders
FROM pizzas JOIN order_details
ON pizzas.pizza_id = order_details.pizza_id 
GROUP BY size
ORDER BY NumOfOrders desc -- L 18526

-- Q5.List the top 5 most ordered pizza types along with their quantities.
select pt.name, SUM(od.quantity) AS total_count
FROM pizza_types AS pt JOIN pizzas AS p ON pt.pizza_type_id = p.pizza_type_id
JOIN order_details od ON p.pizza_id = od.pizza_id
GROUP BY pt.name
ORDER BY total_count desc
LIMIT 5; --


INTERMEDIATE

-- Q1.Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT pt.category, SUM(od.quantity) AS CountOfOrders
FROM pizza_types pt JOIN pizzas p ON pt.pizza_type_id = p.pizza_type_id
JOIN order_details od ON p.pizza_id = od.pizza_id
GROUP BY category
ORDER BY CountOfOrders DESC

-- Q2.Determine the distribution of orders by hour of the day
SELECT HOUR(order_time) AS HourOfDay, COUNT(order_id) AS Quantity
FROM orders GROUP BY HourOfDay

-- Q3.Join relevant tables to find the category-wise distribution of pizzas.
SELECT category, COUNT(name) AS PizzaTypes FROM pizza_types
GROUP BY category
order by PizzaTypes 

-- Q4.Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT AVG(OrdersOnThisDate) AS AvgOrdersPerDay FROM
(SELECT o.order_date, SUM(od.quantity) AS OrdersOnThisDate
FROM orders o JOIN order_details od ON o.order_id = od.order_id
GROUP BY o.order_date) AS Total_Orders_Daywise

-- Q5.Determine the top 3 most ordered pizza types based on revenue.
SELECT pt.name, SUM(od.quantity*p.price) AS revenue 
FROM pizza_types pt JOIN pizzas p ON pt.pizza_type_id = p.pizza_type_id
JOIN order_details od ON p.pizza_id = od.pizza_id
Group BY name
ORDER BY revenue desc
LIMIT 3



ADVANCE
-- Q1.Calculate the percentage contribution of each pizza type to total revenue.
SELECT pt.name, ROUND(sum(p.price*od.quantity)/
	(SELECT ROUND(SUM(pizzas.price*order_details.quantity),2)
    FROM order_details JOIN pizzas on order_details.pizza_id = pizzas.pizza_id)*100,2) AS revenue
FROM pizza_types pt JOIN pizzas p ON pt.pizza_type_id = p.pizza_type_id
JOIN order_details od ON od.pizza_id = p.pizza_id 
GROUP BY name

-- Q2.Analyze the cumulative revenue generated over time.
WITH total_costing AS(
	SELECT pt.name, p.price, 
    FROM pizza_types pt JOIN pizza p ON pt.pizza_type_id = p.pizza_type_id
)select SUM(CASE WHEN p.pizza_id = od.pizza_id THEN p.price * od.quantity END) AS lifetime_revenue
FROM pizzas p JOIN order_details od ON p.pizza_id=od.pizza_id 


Select order_date, 
sum(revenue) over(order by order_date) AS cum_rev 
FROM (select o.order_date, 
sum(od.quantity*p.price) AS revenue
FROM order_details od JOIN pizzas p ON p.pizza_id = od.pizza_id 
JOIN orders o on o.order_id = od.order_id
group by o.order_date) AS sales;


